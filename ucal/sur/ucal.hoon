/+  hora
|%
+$  title     @t
+$  event-code  term
+$  calendar-code  term
::
+$  calendar
  $:  owner=@p
      =calendar-code                                    :: internal name, unique
      =title                                            :: external name
      permissions=calendar-permissions
      date-created=@da
      last-modified=@da
  ==
::  $event-data: data that makes up an event.
::
+$  event-data
  $:  =event-code                                       :: unique id
      =calendar-code
      =about                                            :: metadata
      =detail                                           :: title, desc, location
      when=moment:hora
      =invites
      =rsvp                                             :: organizer rsvp
      tzid=tape
  ==
::  $event: type for calendar events. the optional era determines recurrence
::
+$  event  [data=event-data era=(unit era:hora)]
::  $projected-event: a projected-event represents an event generated by an era.
::  we have a separate type because these shouldn't be storable anywhere,
::  they can be produced by range queries but they can't be persisted.
::
+$  projected-event  [data=event-data source=era:hora]
:: $about: Information about the event, e.g. metadata.
::
+$  about
  $:  organizer=@p
      date-created=@da
      last-modified=@da
  ==
::  $detail: Details about the event itself.
::
+$  detail
  $:  =title
      desc=(unit @t)
      loc=(unit location)
  ==
::
+$  coordinate  [lat=@rd lon=@rd]
::  $location: A location has a written address that may or may not
::  resolve to an actual set of geographic coordinates.
::
+$  location  [address=@t geo=(unit coordinate)]
::
::  Those that are invited to the event.
::
+$  rsvp  ?(%yes %no %maybe)
::
+$  invites  (map @p (unit rsvp))
::  $calendar-permissions: different permission settings a calendar can have.
::  readers: ships that can subscribe to the calendar
::  writers: ships that can edit the calendar and create events
::  acolytes: ships that can change permissions for a calendar
::  readers being unit means any ship can read the calendar,
::  otherwise only the ships in the sets have access.
::  a ship being a writer implies read permissions and a ship
::  being an acolyte implies write permissions.
::
+$  calendar-permissions
  $:  readers=(unit (set @p))
      writers=(set @p)
      acolytes=(set @p)
  ==
::  $calendar-role: enumeration of the different roles a ship can have
::  with respect to a calendar. see $calendar-permissions for an
::  explanation of what these each signify.
::
+$  calendar-role  ?(%reader %writer %acolyte)
--
